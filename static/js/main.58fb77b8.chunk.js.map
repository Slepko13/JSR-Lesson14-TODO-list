{"version":3,"sources":["components/Task1/ListItem/ListItem.js","components/Task1/Task1.js","components/Task2/Item/Item.js","components/Task2/Task2.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","className","message","Task1","state","list","handleChange","bind","addListItem","addListItemEnter","e","this","setState","target","value","key","placeholder","onChange","onKeyPress","onClick","length","map","item","index","Component","Item","inCorrection","correction","handleCorrection","onBlur","setDiv","setDivEnter","autoFocus","onDoubleClick","setInput","isDone","toggleIsDone","deleteListItem","Task2","title","filter","el","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.58fb77b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItem.scss';\r\n\r\nconst ListItem = (props) => {\r\n    return (\r\n        <div className=\"ListItem\">{props.message}</div>\r\n    );\r\n}\r\n\r\nexport default ListItem;","import React, { Component } from 'react';\r\nimport './Task1.scss';\r\nimport ListItem from './ListItem/ListItem';\r\n\r\n\r\nclass Task1 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: '',\r\n            list: []\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.addListItem = this.addListItem.bind(this);\r\n        this.addListItemEnter = this.addListItemEnter.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        this.setState({\r\n            message: e.target.value\r\n        })\r\n    }\r\n    addListItem() {\r\n        // let arr = this.state.list;\r\n        // arr.push(this.state.message);\r\n        if (this.state.message) {\r\n            this.setState({\r\n                message: '',\r\n                list: [...this.state.list, this.state.message]\r\n            })\r\n        }\r\n    }\r\n    addListItemEnter(e) {\r\n        if (e.key === \"Enter\") {\r\n            // let arr = this.state.list;\r\n            // arr.push(this.state.message);\r\n            if (this.state.message) {\r\n                this.setState({\r\n                    message: '',\r\n                    list: [...this.state.list, this.state.message]\r\n                })\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        let list = this.state.list;\r\n\r\n        return (\r\n            <div className=\"Task1\">\r\n                <div className=\"wrap\">\r\n                    <input className=\"input\"\r\n                        placeholder=\"enter task\"\r\n                        onChange={this.handleChange}\r\n                        onKeyPress={this.addListItemEnter}\r\n                        value={this.state.message} />\r\n                    <button className=\"button\" onClick={this.addListItem} >Add</button>\r\n                </div>\r\n                <div className=\"list\">\r\n                    {list.length > 0 ? list.map((item, index) => <ListItem key={index} message={item} />) : null}\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Task1;","import React from 'react';\r\n\r\nimport './Item.scss';\r\n\r\nconst Item = (props) => {\r\n    return (\r\n        <div className=\"Item\">\r\n\r\n            {!props.inCorrection ?\r\n                (<>\r\n\r\n                    <div onDoubleClick={props.setInput} className={props.isDone ? \"messageDone\" : \"message\"}> {props.message}</div>\r\n                    <div className=\"status\">\r\n                        <div className={props.isDone ? \"done isDone\" : \"done\"} onClick={props.toggleIsDone}>V</div>\r\n                        <div className=\"delete\" onClick={props.deleteListItem}>X</div>\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                </>)\r\n                :\r\n                (<div className=\"correction\">\r\n                    <input className=\"correctionInput\"\r\n                        value={props.correction}\r\n                        onChange={props.handleCorrection}\r\n                        onBlur={props.setDiv}\r\n                        onKeyPress={props.setDivEnter}\r\n                        autoFocus\r\n                    />\r\n                </div>)\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Item;","import React, { Component } from 'react';\r\nimport './Task2.scss';\r\nimport Item from './Item/Item';\r\n\r\n\r\n\r\nclass Task2 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: '',\r\n            correction: '',\r\n            title: '',\r\n            isDone: false,\r\n            inCorrection: false,\r\n            list: []\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.addListItem = this.addListItem.bind(this);\r\n        this.addListItemEnter = this.addListItemEnter.bind(this);\r\n\r\n    }\r\n    handleChange(e) {\r\n        this.setState({\r\n            message: e.target.value\r\n        })\r\n    }\r\n    addListItem() {\r\n\r\n        if (this.state.message) {\r\n            this.setState({\r\n                message: '',\r\n                list: [...this.state.list, { title: this.state.message, isDone: false, inCorrection: false }]\r\n            })\r\n        }\r\n    }\r\n    addListItemEnter(e) {\r\n        if (e.key === \"Enter\") {\r\n\r\n            if (this.state.message) {\r\n                this.setState({\r\n                    message: '',\r\n                    list: [...this.state.list, { title: this.state.message, isDone: false, inCorrection: false }]\r\n                })\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    deleteListItem(item, index, e) {\r\n\r\n        this.setState({\r\n            list: this.state.list.filter(el => el !== item)\r\n        })\r\n        console.log(item);\r\n        console.log(index);\r\n        console.log(e);\r\n    }\r\n\r\n    toggleIsDone(item) {\r\n        item.isDone = !item.isDone;\r\n        this.setState({\r\n            list: [...this.state.list]\r\n        })\r\n    }\r\n\r\n    setInput(item) {\r\n        item.inCorrection = true;\r\n\r\n        console.log(item.inCorrection);\r\n        this.setState({\r\n            correction: item.title,\r\n            list: [...this.state.list]\r\n        })\r\n        console.log(this.state);\r\n\r\n    }\r\n    handleCorrection(e) {\r\n        this.setState({\r\n            correction: e.target.value\r\n        })\r\n    }\r\n    setDiv(item) {\r\n        item.inCorrection = false;\r\n        item.isDone = false;\r\n        item.title = this.state.correction;\r\n        this.setState({\r\n            list: [...this.state.list]\r\n        })\r\n    }\r\n    setDivEnter(item, e) {\r\n        if (e.key === \"Enter\") {\r\n\r\n            if (this.state.correction) {\r\n\r\n                item.inCorrection = false;\r\n                item.title = this.state.correction;\r\n                this.setState({\r\n                    list: [...this.state.list]\r\n                })\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let list = this.state.list;\r\n\r\n        return (\r\n            <div className=\"Task2\">\r\n                Double click to change item. Blur/enter to save.\r\n                <div className=\"list\">\r\n\r\n                    {list.length > 0 ? list.map((item, index) =>\r\n                        <Item\r\n                            key={index}\r\n                            message={item.title}\r\n                            isDone={item.isDone}\r\n                            inCorrection={item.inCorrection}\r\n                            correction={this.state.correction}\r\n                            deleteListItem={this.deleteListItem.bind(this, item, index)}\r\n                            toggleIsDone={this.toggleIsDone.bind(this, item)}\r\n                            setInput={this.setInput.bind(this, item)}\r\n                            handleCorrection={this.handleCorrection.bind(this)}\r\n                            setDiv={this.setDiv.bind(this, item)}\r\n                            setDivEnter={this.setDivEnter.bind(this, item)}\r\n\r\n\r\n                        />) : null}\r\n\r\n                </div>\r\n\r\n                <div className=\"wrap\">Task\r\n                    <input className=\"input\"\r\n                        placeholder=\"What do you need to do?\"\r\n                        onChange={this.handleChange}\r\n                        onKeyPress={this.addListItemEnter}\r\n                        value={this.state.message}\r\n                    />\r\n\r\n                    <button className=\"button\" onClick={this.addListItem} >Save item</button>\r\n                </div>\r\n\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Task2;","import React from 'react';\nimport './App.css';\nimport Task1 from './components/Task1/Task1';\nimport Task2 from './components/Task2/Task2';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Task1 />\n      <Task2 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}